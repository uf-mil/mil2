---
name: Service healthcheck

# yamllint disable-line rule:truthy
on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_call:
  workflow_dispatch:

jobs:
  ufl:
    name: eduroam visibility healthcheck
    runs-on:
      group: mala-lab-noble
    steps:
      - name: zobelisk
        run: |
          ping -c 1 zobelisk.mil.ufl.edu &> /dev/null
      # - name: workstation1
      #   run: |
      #     ping -c 1 workstation1.mil.ufl.edu &> /dev/null
      - name: workstation2
        run: |
          ping -c 1 workstation2.mil.ufl.edu &> /dev/null
      - name: nas
        run: |
          ping -c 1 nas.mil.ufl.edu &> /dev/null

  # TODO uf-mil/mil2#94
  # milnet:
  #   name: milnet visibility healthcheck
  #   runs-on:
  #     group: mala-lab-noble
  #   steps:
  #     - name: zobelisk
  #       run: |
  #         ping -c 1 192.168.37.23 &> /dev/null

  external:
    name: external visibility healthcheck
    runs-on:
      group: mala-lab-noble
    steps:
      - name: milwiki
        run: |
          ping -c 1 milwiki.cbrxyz.com &> /dev/null
      - name: mil website
        run: |
          ping -c 1 mil.ufl.edu &> /dev/null
      - name: navigator website
        run: |
          ping -c 1 navigatoruf.org &> /dev/null
      - name: subjugator website
        run: |
          ping -c 1 subjugator.org &> /dev/null

  internal:
    name: internal visibility healthcheck
    runs-on:
      group: mala-lab-noble
    steps:
      - name: zobelisk
        run: |
          ping -c 1 192.168.37.23 &> /dev/null
  account-access:
    name: SMTP Access Check
    runs-on: ubuntu-latest
    steps:
      - name: Verify access for all accounts
        env:
          ACCOUNTS_JSON: ${{ secrets.ACCOUNTS_JSON }}
        run: |
          python - <<'EOF'
          import imaplib, os, json
          try:
              data = json.loads(os.environ["ACCOUNTS_JSON"])
          except Exception as e:
              print(f"Error loading accounts JSON: {e}")
              exit(1)

          for account in data.get("accounts", []):
              server = account.get("server")
              username = account.get("username")
              password = account.get("password")
              if not server or not username or not password:
                  print(f"Malformed JSON or missing credentials for
                        account: {account}")
                  exit(1)
              try:
                  mail = imaplib.IMAP4_SSL(server)
                  mail.login(username, password)
                  status, _ = mail.select("inbox")
                  if status != 'OK':
                      print(f"Failed to access inbox for {server}.")
                      exit(1)
                  print(f"Access verified for {server}.")
                  mail.logout()
              except Exception as e:
                  print(f"Error for account {server}: {e}")
                  exit(1)
          EOF
