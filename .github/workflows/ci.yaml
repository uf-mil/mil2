---
name: MIL2 CI

# We do not trigger on the pull_request hook because it will have already been
# triggered by the push hook!
# yamllint disable-line rule:truthy
on:
  [push, workflow_dispatch]

env:
  # The version of caching we are using. This can be upgraded if we
  # significantly change CI to the point where old caches become irrelevant.
  CACHE_VERSION: 0
  # Default Python version. Jazzy defaults to 3.12.
  DEFAULT_PYTHON: 3.12
  # Location of the pre-commit cache. This is set by pre-commit, not us!
  PRE_COMMIT_CACHE: ~/.cache/pre-commit

# Cancels this run if a new one referring to the same object and same workflow
# is requested
concurrency:
  group: >
    ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  avoid-duplicate-ci:
    name: Check if CI has already be ran
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check_skip.outputs.should_skip }}
    steps:
      - id: check_skip
        uses: fkirc/skip-duplicate-actions@v5

  ensure_healthcheck:
    uses: ./.github/workflows/healthcheck.yaml
    needs: avoid-duplicate-ci
    if: needs.avoid-duplicate-ci.outputs.should_skip != 'true'

  pre-commit:
    name: Run pre-commit
    needs: avoid-duplicate-ci
    runs-on:
      group: mala-lab-pre-commit
    if: needs.avoid-duplicate-ci.outputs.should_skip != 'true'
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
          cache: "pip"
      - name: Install pre-commit hooks
        run: |
          python --version
          pip install "$(grep pre-commit requirements.txt)"
      - name: Generate pre-commit cache key
        id: pre-commit_cache_key
        run: >
          echo "key=${{ env.CACHE_VERSION }}-${{ env.DEFAULT_PYTHON }}-${{
          hashFiles('.pre-commit-config.yaml') }}" >> "$GITHUB_OUTPUT"
      - name: Restore base pre-commit environment
        id: cache-pre-commit
        uses: actions/cache@v4
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >
            ${{ runner.os
            }}-pre-commit-${{ steps.pre-commit_cache_key.outputs.key }}
      - name: Install pre-commit dependencies if no cache
        if: steps.cache-pre-commit.outputs.cache-hit != 'true'
        run: |
          pre-commit install-hooks
      - name: Install hadolint
        run: |
          URL=https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
          sudo wget -O /bin/hadolint $URL
          sudo chmod +x /bin/hadolint
      - name: Run pre-commit
        run: |
          pre-commit run --all-files --show-diff-on-failure

  super-ci:
    name: Run tests and build docs
    needs: avoid-duplicate-ci
    if: needs.avoid-duplicate-ci.outputs.should_skip != 'true'
    runs-on:
      group: mala-lab-noble
    steps:
      - name: Configure catkin workspace folder structure
        run: |
          mkdir -p "$GITHUB_WORKSPACE"/catkin_ws/src
          sudo apt reinstall python3-pip
      - name: Check out code from GitHub
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup ROS2 Jazzy
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: jazzy
      - name: Install pip dependencies
        run: |
          python3 -m pip config set global.break-system-packages true
          pip3 install -r requirements.txt
      - name: Install system dependencies and build
        run: |
          # Needed for /etc/update-manager/release-upgrades
          sudo apt-get install -y ubuntu-release-upgrader-core
          rm -rf build install log
          export HOME=$GITHUB_WORKSPACE/.. # Temporary fix for setup scripts
          ALLOW_NONSTANDARD_DIR=1 ./scripts/install.sh
      # - name: tmate
      #   uses: mxschmitt/action-tmate@v2
      - name: Run clang-tidy
        run: |
          set +u
          export HOME="$GITHUB_WORKSPACE"/.. # Temporary fix for setup scripts
          source "$GITHUB_WORKSPACE"/scripts/setup.bash
          set -u
          # Ensure that origin/main is up to date
          git fetch origin --recurse-submodules=no
          ALL_CHANGES=()
          while IFS='' read -r line; do
            ALL_CHANGES+=("$line")
          done < <(
            git diff --name-only origin/main \
              --ignore-submodules \
              -- "*.cpp" "*.h" "*.hpp"
          )
          cd "$GITHUB_WORKSPACE"
          tidy "${ALL_CHANGES[@]}"
      - name: Run colcon tests
        run: |
          export HOME=$GITHUB_WORKSPACE/.. # Temporary fix for setup scripts
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          set +u
          source scripts/setup.bash
          set -u
          echo $RMW_IMPLEMENTATION
          colcon test --event-handlers console_cohesion+ \
            --executor sequential \
            --return-code-on-test-failure
      # - name: Build docs
      #   run: |
      #     export HOME=$GITHUB_WORKSPACE # Temporary fix for setup scripts
      #     mkdir -p $HOME/.mil
      #     source /opt/ros/noetic/setup.bash
      #     source $GITHUB_WORKSPACE/catkin_ws/devel/setup.bash
      #     cd $GITHUB_WORKSPACE/catkin_ws/src/mil
      #     ./scripts/build_docs -s -d
      # - name: Publish docs artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: docs-ci-html-${{ github.sha }}
      #     path: ${{ github.workspace }}/.mil/docs/html

      # deploy-docs:
      #   name: Deploy docs from master
      #   runs-on:
      #     group: mala-lab-main
      #   needs: super-ci
      #   # https://github.com/actions/runner/issues/491#issuecomment-850884422
      #   if: |
      #     always() &&
      #     (needs.super-ci.result == 'skipped'
      #   || needs.super-ci.result == 'success') &&
      #     github.ref == 'refs/heads/master'
      #   steps:
      #     - name: Checkout
      #       uses: actions/checkout@v4

      #     - name: Make folders
      #       run: |
      #         mkdir -p $GITHUB_WORKSPACE/build/docs

      #     - name: Download artifact
      #       uses: actions/download-artifact@v3
      #       with:
      #         name: docs-ci-html-${{ github.sha }}
      #         path: ${{ github.workspace }}/build/docs

      #     # Publish the artifact to the GitHub Pages branch
      #     - name: Push docs to mil.ufl.edu
      #       run: |
      #         # Install sshpass
      #         sudo apt-get install sshpass
      #         # Upload contents of local folder to remote folder
      #         sshpass -p ${{ secrets.MIL_UFL_SFTP_PASS }} \
      #           sftp -o StrictHostKeyChecking=no \
      #           -P ${{ secrets.MIL_UFL_SFTP_PORT }} mil@mil.ufl.edu << EOF
      #         cd htdocs/docs
      #         lcd ${{ github.workspace }}/build/docs
      #         put -r .
      #         exit
      #         EOF
